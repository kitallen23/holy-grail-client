/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root"
import { Route as ItemsRouteImport } from "./routes/items"
import { Route as IndexRouteImport } from "./routes/index"
import { Route as RunewordsIndexRouteImport } from "./routes/runewords/index"
import { Route as ItemsUniqueIndexRouteImport } from "./routes/items/unique/index"
import { Route as ItemsSetsIndexRouteImport } from "./routes/items/sets/index"
import { Route as ItemsRunesIndexRouteImport } from "./routes/items/runes/index"

const ItemsRoute = ItemsRouteImport.update({
  id: "/items",
  path: "/items",
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: "/",
  path: "/",
  getParentRoute: () => rootRouteImport,
} as any)
const RunewordsIndexRoute = RunewordsIndexRouteImport.update({
  id: "/runewords/",
  path: "/runewords/",
  getParentRoute: () => rootRouteImport,
} as any)
const ItemsUniqueIndexRoute = ItemsUniqueIndexRouteImport.update({
  id: "/unique/",
  path: "/unique/",
  getParentRoute: () => ItemsRoute,
} as any)
const ItemsSetsIndexRoute = ItemsSetsIndexRouteImport.update({
  id: "/sets/",
  path: "/sets/",
  getParentRoute: () => ItemsRoute,
} as any)
const ItemsRunesIndexRoute = ItemsRunesIndexRouteImport.update({
  id: "/runes/",
  path: "/runes/",
  getParentRoute: () => ItemsRoute,
} as any)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/items": typeof ItemsRouteWithChildren
  "/runewords": typeof RunewordsIndexRoute
  "/items/runes": typeof ItemsRunesIndexRoute
  "/items/sets": typeof ItemsSetsIndexRoute
  "/items/unique": typeof ItemsUniqueIndexRoute
}
export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/items": typeof ItemsRouteWithChildren
  "/runewords": typeof RunewordsIndexRoute
  "/items/runes": typeof ItemsRunesIndexRoute
  "/items/sets": typeof ItemsSetsIndexRoute
  "/items/unique": typeof ItemsUniqueIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  "/": typeof IndexRoute
  "/items": typeof ItemsRouteWithChildren
  "/runewords/": typeof RunewordsIndexRoute
  "/items/runes/": typeof ItemsRunesIndexRoute
  "/items/sets/": typeof ItemsSetsIndexRoute
  "/items/unique/": typeof ItemsUniqueIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | "/"
    | "/items"
    | "/runewords"
    | "/items/runes"
    | "/items/sets"
    | "/items/unique"
  fileRoutesByTo: FileRoutesByTo
  to:
    | "/"
    | "/items"
    | "/runewords"
    | "/items/runes"
    | "/items/sets"
    | "/items/unique"
  id:
    | "__root__"
    | "/"
    | "/items"
    | "/runewords/"
    | "/items/runes/"
    | "/items/sets/"
    | "/items/unique/"
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ItemsRoute: typeof ItemsRouteWithChildren
  RunewordsIndexRoute: typeof RunewordsIndexRoute
}

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/items": {
      id: "/items"
      path: "/items"
      fullPath: "/items"
      preLoaderRoute: typeof ItemsRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/runewords/": {
      id: "/runewords/"
      path: "/runewords"
      fullPath: "/runewords"
      preLoaderRoute: typeof RunewordsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    "/items/unique/": {
      id: "/items/unique/"
      path: "/unique"
      fullPath: "/items/unique"
      preLoaderRoute: typeof ItemsUniqueIndexRouteImport
      parentRoute: typeof ItemsRoute
    }
    "/items/sets/": {
      id: "/items/sets/"
      path: "/sets"
      fullPath: "/items/sets"
      preLoaderRoute: typeof ItemsSetsIndexRouteImport
      parentRoute: typeof ItemsRoute
    }
    "/items/runes/": {
      id: "/items/runes/"
      path: "/runes"
      fullPath: "/items/runes"
      preLoaderRoute: typeof ItemsRunesIndexRouteImport
      parentRoute: typeof ItemsRoute
    }
  }
}

interface ItemsRouteChildren {
  ItemsRunesIndexRoute: typeof ItemsRunesIndexRoute
  ItemsSetsIndexRoute: typeof ItemsSetsIndexRoute
  ItemsUniqueIndexRoute: typeof ItemsUniqueIndexRoute
}

const ItemsRouteChildren: ItemsRouteChildren = {
  ItemsRunesIndexRoute: ItemsRunesIndexRoute,
  ItemsSetsIndexRoute: ItemsSetsIndexRoute,
  ItemsUniqueIndexRoute: ItemsUniqueIndexRoute,
}

const ItemsRouteWithChildren = ItemsRoute._addFileChildren(ItemsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ItemsRoute: ItemsRouteWithChildren,
  RunewordsIndexRoute: RunewordsIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
