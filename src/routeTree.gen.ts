/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from "./routes/__root";
import { Route as IndexRouteImport } from "./routes/index";
import { Route as RunewordsIndexRouteImport } from "./routes/runewords/index";
import { Route as ItemsIndexRouteImport } from "./routes/items/index";

const IndexRoute = IndexRouteImport.update({
    id: "/",
    path: "/",
    getParentRoute: () => rootRouteImport,
} as any);
const RunewordsIndexRoute = RunewordsIndexRouteImport.update({
    id: "/runewords/",
    path: "/runewords/",
    getParentRoute: () => rootRouteImport,
} as any);
const ItemsIndexRoute = ItemsIndexRouteImport.update({
    id: "/items/",
    path: "/items/",
    getParentRoute: () => rootRouteImport,
} as any);

export interface FileRoutesByFullPath {
    "/": typeof IndexRoute;
    "/items": typeof ItemsIndexRoute;
    "/runewords": typeof RunewordsIndexRoute;
}
export interface FileRoutesByTo {
    "/": typeof IndexRoute;
    "/items": typeof ItemsIndexRoute;
    "/runewords": typeof RunewordsIndexRoute;
}
export interface FileRoutesById {
    __root__: typeof rootRouteImport;
    "/": typeof IndexRoute;
    "/items/": typeof ItemsIndexRoute;
    "/runewords/": typeof RunewordsIndexRoute;
}
export interface FileRouteTypes {
    fileRoutesByFullPath: FileRoutesByFullPath;
    fullPaths: "/" | "/items" | "/runewords";
    fileRoutesByTo: FileRoutesByTo;
    to: "/" | "/items" | "/runewords";
    id: "__root__" | "/" | "/items/" | "/runewords/";
    fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
    IndexRoute: typeof IndexRoute;
    ItemsIndexRoute: typeof ItemsIndexRoute;
    RunewordsIndexRoute: typeof RunewordsIndexRoute;
}

declare module "@tanstack/react-router" {
    interface FileRoutesByPath {
        "/": {
            id: "/";
            path: "/";
            fullPath: "/";
            preLoaderRoute: typeof IndexRouteImport;
            parentRoute: typeof rootRouteImport;
        };
        "/runewords/": {
            id: "/runewords/";
            path: "/runewords";
            fullPath: "/runewords";
            preLoaderRoute: typeof RunewordsIndexRouteImport;
            parentRoute: typeof rootRouteImport;
        };
        "/items/": {
            id: "/items/";
            path: "/items";
            fullPath: "/items";
            preLoaderRoute: typeof ItemsIndexRouteImport;
            parentRoute: typeof rootRouteImport;
        };
    }
}

const rootRouteChildren: RootRouteChildren = {
    IndexRoute: IndexRoute,
    ItemsIndexRoute: ItemsIndexRoute,
    RunewordsIndexRoute: RunewordsIndexRoute,
};
export const routeTree = rootRouteImport
    ._addFileChildren(rootRouteChildren)
    ._addFileTypes<FileRouteTypes>();
